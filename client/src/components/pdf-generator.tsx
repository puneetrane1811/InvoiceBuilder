import { useState } from "react";
import { Button } from "@/components/ui/button";
import { Dialog, DialogContent, DialogHeader, DialogTitle } from "@/components/ui/dialog";
import { Card, CardContent } from "@/components/ui/card";
import { Download, FileText, Palette, Settings } from "lucide-react";
import { useToast } from "@/hooks/use-toast";
import type { Invoice, Customer, InvoiceLineItem, Item, Template } from "@shared/schema";

type InvoiceWithDetails = Invoice & {
  customer: Customer;
  lineItems: (InvoiceLineItem & { item: Item })[];
};

interface PDFGeneratorProps {
  invoice: InvoiceWithDetails;
  template?: Template;
}

export default function PDFGenerator({ invoice, template }: PDFGeneratorProps) {
  const [isPreviewOpen, setIsPreviewOpen] = useState(false);
  const [isGenerating, setIsGenerating] = useState(false);
  const { toast } = useToast();

  const generatePDFContent = () => {
    const formatCurrency = (amount: string) => `₹${parseFloat(amount).toLocaleString()}`;
    const formatDate = (dateString: string) => new Date(dateString).toLocaleDateString();

    // Calculate line item totals with taxes
    const lineItemsWithTotals = invoice.lineItems.map(lineItem => {
      const lineTotal = lineItem.quantity * parseFloat(lineItem.unitPrice);
      return {
        ...lineItem,
        lineTotal: formatCurrency(lineTotal.toString())
      };
    });

    return {
      invoice: {
        ...invoice,
        formattedTotal: formatCurrency(invoice.total),
        formattedSubtotal: formatCurrency(invoice.subtotal),
        formattedTax: formatCurrency(invoice.totalTax),
        formattedIssueDate: formatDate(invoice.issueDate.toString()),
        formattedDueDate: invoice.dueDate ? formatDate(invoice.dueDate.toString()) : null,
      },
      customer: invoice.customer,
      lineItems: lineItemsWithTotals,
      template: template || {
        name: "Default Template",
        primaryColor: "#3b82f6",
        logoUrl: null,
      }
    };
  };

  const handleGeneratePDF = async () => {
    setIsGenerating(true);
    
    try {
      // This is a placeholder implementation
      // In a real implementation, you would use a library like react-pdf or pdfmake
      
      const pdfData = generatePDFContent();
      
      // Simulate PDF generation
      await new Promise(resolve => setTimeout(resolve, 2000));
      
      // Create a simple text-based PDF content as placeholder
      const pdfContent = `
INVOICE ${pdfData.invoice.invoiceNumber}

Bill To:
${pdfData.customer.name}
${pdfData.customer.email || ''}
${pdfData.customer.billingAddress || ''}

Invoice Details:
Issue Date: ${pdfData.invoice.formattedIssueDate}
${pdfData.invoice.formattedDueDate ? `Due Date: ${pdfData.invoice.formattedDueDate}` : ''}
Status: ${pdfData.invoice.status.toUpperCase()}

Line Items:
${pdfData.lineItems.map(item => 
  `${item.item.name} - Qty: ${item.quantity} x ${formatCurrency(item.unitPrice)} = ${item.lineTotal}`
).join('\n')}

Subtotal: ${pdfData.invoice.formattedSubtotal}
Tax: ${pdfData.invoice.formattedTax}
Total: ${pdfData.invoice.formattedTotal}

Generated by InvoicePro v2.1.0
      `.trim();

      // Create and download the file
      const blob = new Blob([pdfContent], { type: 'text/plain' });
      const url = URL.createObjectURL(blob);
      const link = document.createElement('a');
      link.href = url;
      link.download = `invoice-${pdfData.invoice.invoiceNumber}.txt`;
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
      URL.revokeObjectURL(url);

      toast({ 
        title: "PDF Generated", 
        description: "Invoice has been downloaded as a text file. Full PDF generation will be available soon." 
      });

    } catch (error) {
      toast({ 
        title: "PDF Generation Failed", 
        description: "There was an error generating the PDF.", 
        variant: "destructive" 
      });
    } finally {
      setIsGenerating(false);
    }
  };

  const PDFPreview = () => {
    const pdfData = generatePDFContent();
    
    return (
      <div className="bg-white p-8 max-w-2xl mx-auto" style={{ fontFamily: 'Arial, sans-serif' }}>
        {/* Header */}
        <div className="mb-8">
          <div className="flex items-center justify-between mb-6">
            <div className="flex items-center space-x-3">
              <div 
                className="w-12 h-12 rounded-lg flex items-center justify-center text-white font-bold text-lg"
                style={{ backgroundColor: pdfData.template.primaryColor || '#3b82f6' }}
              >
                IP
              </div>
              <div>
                <h1 className="text-2xl font-bold text-gray-900">InvoicePro</h1>
                <p className="text-gray-600">Professional Invoicing</p>
              </div>
            </div>
            <div className="text-right">
              <h2 className="text-3xl font-bold text-gray-900">INVOICE</h2>
              <p className="text-lg font-semibold text-gray-700">{pdfData.invoice.invoiceNumber}</p>
            </div>
          </div>
        </div>

        {/* Invoice Details */}
        <div className="grid grid-cols-2 gap-8 mb-8">
          <div>
            <h3 className="text-lg font-semibold text-gray-900 mb-4">Bill To:</h3>
            <div className="text-gray-700">
              <p className="font-medium">{pdfData.customer.name}</p>
              {pdfData.customer.email && <p>{pdfData.customer.email}</p>}
              {pdfData.customer.phone && <p>{pdfData.customer.phone}</p>}
              {pdfData.customer.gstin && <p>GSTIN: {pdfData.customer.gstin}</p>}
              {pdfData.customer.billingAddress && (
                <p className="mt-2 whitespace-pre-line">{pdfData.customer.billingAddress}</p>
              )}
            </div>
          </div>
          <div className="text-right">
            <div className="space-y-2">
              <div className="flex justify-between">
                <span className="font-medium">Issue Date:</span>
                <span>{pdfData.invoice.formattedIssueDate}</span>
              </div>
              {pdfData.invoice.formattedDueDate && (
                <div className="flex justify-between">
                  <span className="font-medium">Due Date:</span>
                  <span>{pdfData.invoice.formattedDueDate}</span>
                </div>
              )}
              <div className="flex justify-between">
                <span className="font-medium">Status:</span>
                <span className="capitalize font-semibold">{pdfData.invoice.status}</span>
              </div>
            </div>
          </div>
        </div>

        {/* Line Items */}
        <div className="mb-8">
          <table className="w-full border-collapse">
            <thead>
              <tr className="border-b-2 border-gray-300">
                <th className="text-left py-3 font-semibold">Description</th>
                <th className="text-center py-3 font-semibold">Qty</th>
                <th className="text-right py-3 font-semibold">Rate</th>
                <th className="text-right py-3 font-semibold">Amount</th>
              </tr>
            </thead>
            <tbody>
              {pdfData.lineItems.map((item, index) => (
                <tr key={index} className="border-b border-gray-200">
                  <td className="py-3">
                    <div>
                      <p className="font-medium">{item.item.name}</p>
                      {item.item.description && (
                        <p className="text-sm text-gray-600">{item.item.description}</p>
                      )}
                    </div>
                  </td>
                  <td className="text-center py-3">{item.quantity}</td>
                  <td className="text-right py-3">{formatCurrency(item.unitPrice)}</td>
                  <td className="text-right py-3 font-medium">{item.lineTotal}</td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>

        {/* Totals */}
        <div className="flex justify-end">
          <div className="w-64">
            <div className="space-y-2">
              <div className="flex justify-between py-2">
                <span>Subtotal:</span>
                <span className="font-medium">{pdfData.invoice.formattedSubtotal}</span>
              </div>
              <div className="flex justify-between py-2">
                <span>Tax:</span>
                <span className="font-medium">{pdfData.invoice.formattedTax}</span>
              </div>
              <div className="flex justify-between py-3 border-t-2 border-gray-300 font-bold text-lg">
                <span>Total:</span>
                <span>{pdfData.invoice.formattedTotal}</span>
              </div>
            </div>
          </div>
        </div>

        {/* Footer */}
        <div className="mt-12 pt-8 border-t border-gray-200 text-center text-gray-600">
          <p>Generated by InvoicePro v2.1.0</p>
        </div>
      </div>
    );
  };

  const formatCurrency = (amount: string) => `₹${parseFloat(amount).toLocaleString()}`;

  return (
    <div className="flex items-center space-x-2">
      <Button
        variant="ghost"
        size="sm"
        onClick={() => setIsPreviewOpen(true)}
        data-testid="button-preview-pdf"
      >
        <FileText className="w-4 h-4" />
      </Button>
      
      <Button
        variant="ghost"
        size="sm"
        onClick={handleGeneratePDF}
        disabled={isGenerating}
        data-testid="button-download-pdf"
      >
        <Download className="w-4 h-4" />
      </Button>

      <Dialog open={isPreviewOpen} onOpenChange={setIsPreviewOpen}>
        <DialogContent className="max-w-4xl max-h-[90vh] overflow-y-auto p-0">
          <DialogHeader className="p-6 pb-0">
            <div className="flex items-center justify-between">
              <DialogTitle>PDF Preview</DialogTitle>
              <div className="flex items-center space-x-2">
                <Button
                  variant="outline"
                  size="sm"
                  onClick={handleGeneratePDF}
                  disabled={isGenerating}
                  data-testid="button-generate-pdf-preview"
                >
                  {isGenerating ? (
                    "Generating..."
                  ) : (
                    <>
                      <Download className="w-4 h-4 mr-2" />
                      Download PDF
                    </>
                  )}
                </Button>
              </div>
            </div>
          </DialogHeader>
          
          <div className="p-6">
            <Card>
              <CardContent className="p-0">
                <PDFPreview />
              </CardContent>
            </Card>
            
            <div className="mt-6 p-4 bg-amber-50 border border-amber-200 rounded-lg">
              <div className="flex items-start space-x-3">
                <Settings className="w-5 h-5 text-amber-600 mt-0.5" />
                <div>
                  <h4 className="font-medium text-amber-800">PDF Generation Preview</h4>
                  <p className="text-sm text-amber-700 mt-1">
                    This is a preview of your invoice. The actual PDF will be generated with proper formatting 
                    and styling using react-pdf. Currently, a text version will be downloaded for demonstration purposes.
                  </p>
                </div>
              </div>
            </div>
          </div>
        </DialogContent>
      </Dialog>
    </div>
  );
}
